buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.1"
        classpath "gradle.plugin.org.kt3k:ebean-enhance-plugin:2.0.5"
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.0.3"
}

group 'com.ascotrobot'
version '0.1-SNAPSHOT'


apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.github.kt3k.ebean.enhance'

def mainClass = "com.ascotrobot.kue.internal.Main"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:1.0.1"
    compile "com.sparkjava:spark-core:2.5"
    compile "org.avaje.ebeanorm:avaje-ebeanorm:7.13.1"
    compile "com.jolbox:bonecp:0.8.0.RELEASE"
    compile "com.typesafe:config:1.3.0"
    compile "com.google.inject:guice:4.0"
    compile "mysql:mysql-connector-java:5.1.36"
    compile "com.fasterxml.jackson.core:jackson-databind:2.8.0"
    testCompile "junit:junit:4.11"
}

ebeanEnhance {
    packages = 'com.ascotrobot.kue.models.db.**'
}

flyway {
    url = "$System.env.WIDGET_DB_URL"
    user = "$System.env.WIDGET_DB_USERNAME"
    password = "$System.env.WIDGET_DB_PASSWORD"
}

task run(dependsOn: [':build', ':flywayMigrate']) {
    def classpath = sourceSets.main.runtimeClasspath.getFiles().collect {it.getAbsolutePath()}.join(':')
    doLast {
        def runningPidFile = new File("./RUNNING_PID")
        if (runningPidFile.exists()) {
            def pid = runningPidFile.readLines()[0]
            "kill $pid".execute()
        }
        Thread.start {
            def proc = "java -cp $classpath $mainClass".execute()
            Gradle.addShutdownHook {
                proc.destroy()
            }
            if (proc in UNIXProcess) {
                runningPidFile.write(proc.pid.toString())
            }
            Thread.start { printStream(proc.inputStream) }
            Thread.start { printStream(proc.errorStream) }
        }
    }
}

def printStream(InputStream is) {
    def bytes = new byte[32]
    def read = 0
    while((read = is.read(bytes)) != -1) {
        print (new String(bytes, 0, read, "UTF-8"))
    }
}




